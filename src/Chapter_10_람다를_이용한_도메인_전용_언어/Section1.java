package Chapter_10_람다를_이용한_도메인_전용_언어;

public class Section1 {
    /**
     *      개발자들은 프로그래밍 언어도 언어라는 사실을 잊고는 한다. 언어의 주요 목표는 메시지를 명확하고 안정적인 방식으로 전달하는 것이다.
     *      프로그램은 사람들이 이해할 수 있도록 작성되어야 하는 것이 중요하며, 기기가 실행하는 것은 부차적이라는 말이 있다.
     *
     *      애플리케이션의 핵심 비지니스를 모델링하는 소프트웨어 영역에서 읽기 쉽고, 이해하기 쉬운 코드는 중요하다. 도메인 전용 언어(DSL)로 애플리케이션
     *      의 비즈니스 로직을 표현함으로써 이 문제를 해결할 수 있다. DSL은 작은, 범용이 아닌 특정 도메인을 대상으로 만들어진 특수 프로그래밍 언어이다.
     *
     *
     *
     *              >  10.1 도메인 전용 언어
     *
     *     DSL은 특정 비즈니스 도메인의 문제를 해결하려고 만든 언어이다. 예시로 회계 전용 소프트웨어 애플리케이션을 개발한다고 했을 때 다양한 개념이
     *     표현되어야 한다. 이러한 문제를 표현할 수 있는 DSL를 만들수 이싿. 자바에서는 도메인을 표현할 수 있는 클래스와 메소드 집합이 필요하다.
     *     DSL이란 특정 비즈니스 도메인을 인터페이스로 만는 API라고 할 수 있다.
     *
     *     DSL은 범용 프로그래밍 언어가 아닌 특정 도메인에 국한되는 언어이다. 그러므로 DSL는 해당 문제만 해결하는 것에 집중하면 된다. 저수준 구현 세부
     *     사항 메소드는 클래스의 비공개로 만들어서 저수준 구현 세부 내용은 숨길 수 있다. 그렇게 하면 사용자 친화적인 DSL을 만들 수 있다. DSL은 아래의
     *     두 가지 필요성을 생각하면서 개발하여야 한다.
     *
     *          1. 의사 소통 : 코드의 의도가 명확히 전달되어야 하므로 프로그래머가 아닌 사람도 이해할 수 있어야 한다. 이런 방식으로 코드가 비즈니스
     *          요구 사항에 부합하는지 알 수 있다.
     *
     *          2. 가독성: 항상 다른 사람이 이해할 수 있게 구현해야한다.
     *
     *
     *              > 10.1.1 DSL의 장점과 단점
     *     DSL은 만병통치약이 아니다. DSL은 코드의 비즈니스 의도를 명확하게 하고 가독성을 높힌다는 장점이 있지만 DSL은 구현은 코드이므로 올바로 검증하고
     *     유지보수해야하는 책임이 따른다. 따라서 DSL의 장점과 비용을 모두 확인해야만 프로젝트에 DSL을 추가하는 것이 투자대비 긍정적인 결과를 가져올지
     *     평가할 수 있다.
     *
     *          1. 간결함 : API는 비즈니스 로직을 간편하게 캡슐화하므로 반복을 피할 수 있고 코드를 간결하게 만들 수 있다.
     *          2. 가독성 : 도메인 영역의 용어를 사용하므로 비 도메인 전문가도 코드를 쉽게 이해할 수 있다. 결과적으로 다양한 조직 구성원 간에
     *          코드와 도메인 영역이 공유될 수 있다
     *          3. 유지보수 : 잘 설계된 DSL로 구현한 코드는 쉽게 유지보수하고 바꿀 수 있다. 유지보수는 비즈니스 관련 코드 즉, 가장 빈번히 바뀌는 애플리
     *          케이션 부분에 특지 중요하다.
     *          4. 높은 수준의 추상화 : DSL은 도메인과 같은 추상화 수준에서 동작하므로 도메인의 문제와 직접적으로 관련되지 않은 세부 사항을 숨긴다.
     *          5. 집중 : 비즈니스 도메인의 규칙을 표현할 목적으로 설계된 언어이므로 프로그래머가 특정 코드에 집중할 수 있다. 결과적으로 생산성이 좋아진다.
     *          6. 관심사 분리 : 지정된 언어로 비즈니스 로직을 표현함으로 애플리케이션의 인프라구조와 관련된 문제와 독립적으로 비즈니스 관련된 코드에서
     *          집중하기가 용이하다. 결과적으로 유지보수가 쉬운 코드를 구현한다.
     */
}
