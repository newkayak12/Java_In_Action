package Chapter_14_자바_모듈_시스템;

public class Section1 {
    /**
     *
     *   쉬운 소프트웨어를 만드는 데 도움을 주는 관심사 분리와 정보 은닉을 살펴보자.
     *
     *          > 14.1.1 관심사 분리(SoC, Separation of Concerns)
     *   관심사 분리는 컴퓨터 프로그램을 고유의 기능으로 나누는 동작을 권장하는 원칙이다. 각 기능을 모듈이라는 각각의 부분, 서로 겹치지 않는 코드 그룹으로
     *   분리할 수 있다. 다시 말해 클래스를 그룹화한 모듈을 이용해 애플리케이션의 클래스 간의 관계를 시각적으로 보여줄 수 있다. 자바 9 모듈은 클래스가
     *   어떤 다른 클래스를 볼 수 있는지를 컴파일 타임에 정교하게 제어할 수 있다.
     *
     *   SoC 원칙은 모델, 뷰, 컨트롤러 같은 아키텍쳐 관점 그리고 복구 기법을 비즈니스 로직과 분리하는 등의 하위 수준 접근 등의 상황에 유용하다. SoC 원칙은
     *   아래와 같은 장점을 제공한다.
     *
     *      1. 개별 기능을 따로 작업할 수 있으므로 팀이 쉽게 협업할 수 있다.
     *      2. 개별 부분을 재사용할 수 있다.
     *      3. 전체 시스템을 쉽게 유지보수할 수 있다.
     *
     *
     *          > 14.1.2 정보 은닉
     *   정보 은닉은 세부 구현을 숨기도록 장려하는 원칙이다. 세부 구현을 숨김으로써 프로그램의 어떤 부분을 바꿨을 때 다른 부분까지 영향을 미칠 가능성을
     *   줄일 수 있다. 즉, 코드를 관리하고 보호하는데 유용한 원칙이다. 캡슐화는 특정 코드 조각이 애플리케이션의 다른 부분과 고립되어 있음을 의미한다.
     *   캡슐화된 코드의 내부적인 변화가 의도치 않게 외부에 영향을 미칠 가능성이 줄어든다. 자바에서 클래스 내의 컴포넌트에 적절하게 private 키워드를 사용
     *   했는지를 기준으로 컴파일러를 이용해서 캡슐화를 확인할 수 있다.
     *
     *
     *          > 14.2 자바 모듈 시스템을 설계한 이유
     *
     *          > 14.2.1 모듈화의 한계
     *   자바 9 이전까지는 모듈화된 소프트웨어 프로젝트를 만드는데 한계가 있었다. 자바는 클래스, 패키지, JAR 세 가지 수준의 코드 그룹화를 제공한다.
     *   클래스와 관련해 자바는 접근 제한자와 캡슐화를 지원했다. 하지만 패키지와 JAR 수준에서는 캡슐화를 거의 지원하지 않았다.
     *
     *          > 제한된 가시성 제어
     *   많은 애플리케이션은 다양한 클래스 그룹을 정의한 여러 패키지가 있는데 패키지의 가시성 제어 기능은 유명무실한 수준이다. 한 패키지의 클래스와
     *   인터페이스를 다른 패키지로 공개하려면 public으로 이들을 선언해야한다. 결과적으로 이들 클래스와 인터페이스는 모두에게 공개된다. 특히 기본 구현을
     *   제공하는 의미로 impl이라는 문자열을 가진 패키지에서 이런 문제가 두드러진다. 이런 상황에서 보통 패키지 내부의 접근자가 public이므로 사용자가
     *   이 내부 구현을 마음대로 사용할 수 있다. 내부적으로 사용할 목적으로 만든 구현을 다른 프로그래머가 임시적으로 사용해서 정착해버릴 수 있으므로
     *   결국 기존의 애플리케이션을 망가뜨리지 않고 라이브러리 코드를 바꾸기 어려워진다.
     */
}
