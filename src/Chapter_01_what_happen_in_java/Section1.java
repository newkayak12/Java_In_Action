package Chapter_01_what_happen_in_java;

public class Section1 {
    /**
     * 자바 8로 넘어오면서 특히 멀티 코어를 이용한 병렬 처리에 대한 접근이 쉬워졌다. 자바8로 넘어오면서 생긴 변화를 요약하면 아래와 같다.
     *  1. 스트림 API
     *  2. 메서드에 코드를 전달하는 기법
     *  3. 인터페이스의 디폴트 메소드
     *
     *  스트림 API를 사용하면 에러를 자주 일으키며 멀티코어를 사용하는 것보다 비용이 비싼 Synchronized를 사용하지 않아도 된다.
     *  조금 다른 관점으로 보면 스트림 API 덕에 메소드에 코드를 전달하는 기법(메소드 참조와 람다), 인터페이스의 디폴트가 존재할 수 있다.
     *  -> 함수형 프로그래밍(Functional-style Programming)
     *
     *  이와 같은 자바8은 아래의 세 가지 프로그래밍 개념을 바탕으로 설계되었다.
     *
     *  1. 스트림 처리
     *  스트림이란 한 번에 한 개씩 만들어지는 연속적인 데이터 항목들의 모임이다. 이는 자동차 생성 공장으로 비유할 수 있다. 공장은 여러 자동차로
     *  구성된 스트림을 처리하는데, 각각의 작업장에서는 자동차를 받아서 수리한 다음에 다음 작업장에서 다른 작업을 할 수 있도록 넘겨준다.
     *  이와 같이 java.util.stream 패키지에 추가된 스트림 API는 Stream<T>에서 T 형식으로 구성된 일련의 항목을 가지고 파이프 라인을
     *  만드는데 필요한 많은 메소드를 제공한다. 즉, 기존에는 한 번에 한 항목으로 처리했지만 자바 8에서는 하려는 작업을 고수준으로 추상화하여
     *  일련의 스트림으로 만들어 처리할 수 있다는 것이다. 또한 스트림 파이프라인을 통해서 입력 부분을 여러 CPU 코어에 쉽게 할당할 수 있다는
     *  부가적인 이득도 얻을 수 있다. 이는 쓰레드를 사용하지 않고 공짜로 병렬성을 얻을 수 있다는 이득이 있다.
     *
     *  2.
     *
     */
}
